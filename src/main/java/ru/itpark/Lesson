CREATE TABLE products
(
    id       INTEGER PRIMARY KEY AUTOINCREMENT,
    name     TEXT    NOT NULL,
    price    INTEGER NOT NULL CHECK ( price >= 0 ),
    quantity INTEGER NOT NULL CHECK ( quantity >= 0 ) DEFAULT 0
);

CREATE TABLE managers
(
    id      INTEGER PRIMARY KEY AUTOINCREMENT,
    name    TEXT    NOT NULL,
    salary  INTEGER NOT NULL CHECK ( salary >= 0 ),
    plan    INTEGER NOT NULL DEFAULT 0,
    boss_id INTEGER REFERENCES managers,
    department TEXT DEFAULT NULL
);

CREATE TABLE orders
(
    id         INTEGER PRIMARY KEY AUTOINCREMENT,
    manager_id INTEGER REFERENCES managers NOT NULL
);

CREATE TABLE sales
(
    id         INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id   INTEGER REFERENCES orders   NOT NULL,
    product_id INTEGER REFERENCES products NOT NULL,
    quantity   INTEGER                     NOT NULL check ( quantity > 0 ),
    price      INTEGER                     NOT NULL CHECK ( price >= 0 )
);

INSERT INTO products (name, price, quantity)
VALUES ('BigMac', 200, 10),
       ('ChickenMac', 150, 20),
       ('CheeseBurger', 120, 15),
       ('Tea', 100, 50),
       ('Cola', 100, 200),
       ('Coffee', 100, 50);

INSERT INTO managers (id, name, salary, plan, boss_id)
VALUES (1, 'Vasya', 100, 0, NULL),
       (2, 'Petya', 80, 80, 1),
       (3, 'Vanya', 60, 60, 2),
       (4, 'Dasha', 90, 90, 1),
       (5, 'Sasha', 70, 70, 4),
       (6, 'Masha', 50, 50, 5);

INSERT INTO orders (id, manager_id)
VALUES (1, 1),
       (2, 2),
       (3, 3),
       (4, 4),
       (5, 5);

INSERT INTO sales(order_id, product_id, quantity, price)
VALUES (1, 1, 5, 200),
       (1, 2, 5, 200),
       (2, 3, 10, 120),
       (3, 3, 10, 120),
       (4, 6, 20, 150),
       (5, 5, 10, 100);


UPDATE managers
SET salary = salary + 10
WHERE id = 1;

INSERT INTO managers (name, salary, boss_id)
VALUES ('Noname', 10000, 4);

DELETE
FROM managers
WHERE name = 'Noname';

SELECT *
FROM managers;

SELECT id, name, plan
FROM managers;

SELECT id, salary - plan AS diff, name
FROM managers;

SELECT id, salary
FROM managers
WHERE plan != 0;

SELECT id, salary, name
FROM managers
WHERE plan != 0
  AND salary < 80;

SELECT *
FROM managers
WHERE NOT plan = 0;

SELECT *
FROM managers
WHERE boss_id IS NULL;

SELECT *
FROM managers
WHERE boss_id IS NOT NULL;

SELECT *
FROM managers
LIMIT 2 OFFSET 3;

SELECT id, name
FROM managers
ORDER BY name DESC;

UPDATE managers
SET salary = 80
WHERE name = 'Sasha';

SELECT id, name, CASE WHEN boss_id IS NULL THEN 'No Boss' ELSE 'Somebody is Boss' END AS boss
FROM managers;


SELECT max(price * quantity) FROM products;

UPDATE managers SET department = 'girls' WHERE id >= 4;
UPDATE managers SET department = 'boys' WHERE id IN (2, 3);

SELECT department, max(salary) FROM managers GROUP BY department;

SELECT department, max(salary)
FROM managers
WHERE department IS NOT NULL
GROUP BY department;

SELECT department, max(salary)
FROM managers
GROUP BY department
HAVING department IS NOT NULL;


--
SELECT s.id, s.price * s.quantity AS total,
       (
           SELECT p.name
           FROM products p
           WHERE s.product_id = p.id
       ) name
FROM sales s;

SELECT m.id, m.salary,
       (SELECT  avg(m1.salary) FROM managers m1) averge
FROM managers m;


SELECT s.id, (s.price * s.quantity) total, p.name FROM sales s
INNER JOIN products p on s.product_id = p.id;

SELECT m1.id, m1.name, m2.name boss
FROM managers m1
JOIN managers m2 ON m1.boss_id = m2.id;


SELECT m1.id, m1.name, m2.name boss
FROM managers m1
        LEFT JOIN managers m2 ON m1.boss_id = m2.id;


SELECT m1.id, m1.name, m2.name boss
FROM managers m1
        JOIN managers m2 ON m1.boss_id = m2.id;

--Статистика продаж

SELECT o.id FROM orders o;

SELECT order_id, sum(s.quantity * s.price) total FROM sales s GROUP BY order_id;

SELECT o.manager_id , m.name, s.total
FROM orders o
         INNER JOIN
    (
      SELECT order_id, sum(s.quantity * s.price) total FROM sales s GROUP BY order_id
    ) s ON o.id = s.order_id
         INNER JOIN managers m ON o.manager_id = m.id;






DROP TABLE managers;
DROP TABLE orders;
DROP TABLE products;
DROP TABLE sales;